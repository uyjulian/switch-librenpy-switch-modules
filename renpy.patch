diff --git a/module/ffmedia.c b/module/ffmedia.c
index 300c325aa..e0de9ba4e 100644
--- a/module/ffmedia.c
+++ b/module/ffmedia.c
@@ -84,6 +84,9 @@ static int64_t rwops_seek(void *opaque, int64_t offset, int whence) {
 static AVIOContext *rwops_open(SDL_RWops *rw) {
 
     unsigned char *buffer = av_malloc(RWOPS_BUFFER);
+	if (buffer == NULL) {
+		return NULL;
+	}
     AVIOContext *rv = avio_alloc_context(
         buffer,
         RWOPS_BUFFER,
@@ -92,6 +95,10 @@ static AVIOContext *rwops_open(SDL_RWops *rw) {
         rwops_read,
         rwops_write,
         rwops_seek);
+    if (rv == NULL) {
+    	av_free(buffer);
+    	return NULL;
+    }
 
     return rv;
 }
@@ -134,12 +141,16 @@ typedef struct SurfaceQueueEntry {
 
 typedef struct MediaState {
 
+    /* The next entry in a list of MediaStates */
+    struct MediaState *next;
+
+    /* The thread associated with decoding this media. */
+    SDL_Thread *thread;
 
 	/* The condition and lock. */
 	SDL_cond* cond;
 	SDL_mutex* lock;
 
-
 	SDL_RWops *rwops;
 	char *filename;
 
@@ -148,12 +159,6 @@ typedef struct MediaState {
 	 */
 	int want_video;
 
-	/*
-	 * This becomes true when the decode thread starts, when
-	 * it is the decode thread's job to deallocate this object.
-	 */
-	int started;
-
 	/* This becomes true once the decode thread has finished initializing
 	 * and the readers and writers can do their thing.
 	 */
@@ -256,31 +261,51 @@ static AVFrame *dequeue_frame(FrameQueue *fq);
 static void free_packet_queue(PacketQueue *pq);
 static SurfaceQueueEntry *dequeue_surface(SurfaceQueueEntry **queue);
 
+
+/* A queue of MediaState objects that are awaiting deallocation.*/
+static MediaState *deallocate_queue = NULL;
+
+/* A mutex that discards deallocate_queue. */
+SDL_mutex *deallocate_mutex = NULL;
+
+/* Deallocates a single MediaState. */
 static void deallocate(MediaState *ms) {
-	/* Destroy video stuff. */
 
-	while (1) {
+    while (1) {
 		SurfaceQueueEntry *sqe = dequeue_surface(&ms->surface_queue);
 
 		if (! sqe) {
 			break;
 		}
 
-		SDL_free(sqe->pixels);
+		if (sqe->pixels) {
+			SDL_free(sqe->pixels);
+		}
 		av_free(sqe);
 	}
 
-	sws_freeContext(ms->sws);
+	if (ms->sws) {
+		sws_freeContext(ms->sws);
+	}
 
-	av_frame_free(&ms->video_decode_frame);
+	if (ms->video_decode_frame) {
+		av_frame_free(&ms->video_decode_frame);
+	}
 
 	av_packet_unref(&ms->video_pkt);
 
 	/* Destroy audio stuff. */
-	swr_free(&ms->swr);
+	if (ms->swr) {
+		swr_free(&ms->swr);
+	}
 
-	av_frame_free(&ms->audio_decode_frame);
-	av_frame_free(&ms->audio_out_frame);
+	if (ms->audio_decode_frame) {
+		av_frame_free(&ms->audio_decode_frame);
+	}
+
+	if (ms->audio_out_frame) {
+		av_frame_free(&ms->audio_out_frame);
+	}
 
 	while (1) {
 		AVFrame *f = dequeue_frame(&ms->audio_queue);
@@ -296,30 +321,74 @@ static void deallocate(MediaState *ms) {
 	free_packet_queue(&ms->audio_packet_queue);
 	free_packet_queue(&ms->video_packet_queue);
 
-	avcodec_free_context(&ms->video_context);
-	avcodec_free_context(&ms->audio_context);
+	if (ms->video_context) {
+		avcodec_free_context(&ms->video_context);
+	}
+	if (ms->audio_context) {
+		avcodec_free_context(&ms->audio_context);
+	}
 
 	if (ms->ctx) {
 		for (int i = 0; i < ms->ctx->nb_streams; i++) {
-			avcodec_close(ms->ctx->streams[i]->codec);
+			if (ms->ctx->streams[i]->codec) {
+				avcodec_close(ms->ctx->streams[i]->codec);
+			}
 		}
+
+		if (ms->ctx->pb) {
+			if (ms->ctx->pb->buffer) {
+				av_freep(&ms->ctx->pb->buffer);
+			}
+			av_freep(&ms->ctx->pb);
+		}
+
+		avformat_close_input(&ms->ctx);
+		avformat_free_context(ms->ctx);
 	}
 
-	if (ms->ctx->pb) {
-		av_freep(&ms->ctx->pb->buffer);
-		av_freep(&ms->ctx->pb);
+	/* Destroy alloc stuff. */
+	if (ms->cond) {
+		SDL_DestroyCond(ms->cond);
+	}
+	if (ms->lock) {
+		SDL_DestroyMutex(ms->lock);
 	}
 
-	avformat_close_input(&ms->ctx);
+	if (ms->rwops) {
+		rwops_close(ms->rwops);
+	}
 
-	/* Destroy alloc stuff. */
-	SDL_DestroyCond(ms->cond);
-	SDL_DestroyMutex(ms->lock);
+	if (ms->filename) {
+		av_free(ms->filename);
+	}
 
-	rwops_close(ms->rwops);
+	/* Add this MediaState to a queue to have its thread ended, and the MediaState
+	 * deactivated.
+	 */
+	SDL_LockMutex(deallocate_mutex);
+    ms->next = deallocate_queue;
+    deallocate_queue = ms;
+    SDL_UnlockMutex(deallocate_mutex);
 
-	av_free(ms->filename);
-	av_free(ms);
+}
+
+/* Perform the portion of deallocation that's been deferred to the main thread. */
+static void deallocate_deferred() {
+
+    SDL_LockMutex(deallocate_mutex);
+
+    while (deallocate_queue) {
+        MediaState *ms = deallocate_queue;
+        deallocate_queue = ms->next;
+
+        if (ms->thread) {
+            SDL_WaitThread(ms->thread, NULL);
+        }
+
+        av_free(ms);
+    }
+
+    SDL_UnlockMutex(deallocate_mutex);
 }
 
 static void enqueue_frame(FrameQueue *fq, AVFrame *frame) {
@@ -351,6 +420,10 @@ static AVFrame *dequeue_frame(FrameQueue *fq) {
 
 static void enqueue_packet(PacketQueue *pq, AVPacket *pkt) {
 	AVPacketList *pl = av_malloc(sizeof(AVPacketList));
+	if (pl == NULL)
+	{
+		return;
+	}
 
 	av_init_packet(&pl->pkt);
 	av_packet_ref(&pl->pkt, pkt);
@@ -496,6 +569,10 @@ static AVCodecContext *find_context(AVFormatContext *ctx, int index) {
 
 	codec_ctx = avcodec_alloc_context3(codec);
 
+	if (codec_ctx == NULL) {
+		return NULL;
+	}
+
 	if (avcodec_copy_context(codec_ctx, codec_ctx_orig)) {
 		goto fail;
 	}
@@ -530,6 +607,11 @@ static void decode_audio(MediaState *ms) {
 		ms->audio_decode_frame = av_frame_alloc();
 	}
 
+	if (ms->audio_decode_frame == NULL) {
+		ms->audio_finished = 1;
+		return;
+	}
+
 	av_init_packet(&pkt);
 
 	double timebase = av_q2d(ms->ctx->streams[ms->audio_stream]->time_base);
@@ -572,6 +654,12 @@ static void decode_audio(MediaState *ms) {
 			}
 
             converted_frame = av_frame_alloc();
+
+			if (converted_frame == NULL) {
+				ms->audio_finished = 1;
+				return;
+			}
+
             converted_frame->sample_rate = audio_sample_rate;
             converted_frame->channel_layout = AV_CH_LAYOUT_STEREO;
             converted_frame->format = AV_SAMPLE_FMT_S16;
@@ -738,6 +826,10 @@ static SurfaceQueueEntry *decode_video_frame(MediaState *ms) {
 	}
 
 	SurfaceQueueEntry *rv = av_malloc(sizeof(SurfaceQueueEntry));
+	if (rv == NULL) {
+		ms->video_finished = 1;
+		return NULL;
+	}
 	rv->w = ms->video_decode_frame->width + FRAME_PADDING * 2;
 	rv->pitch = rv->w * sample->format->BytesPerPixel;
 	rv->h = ms->video_decode_frame->height + FRAME_PADDING * 2;
@@ -788,6 +880,11 @@ static void decode_video(MediaState *ms) {
 		ms->video_decode_frame = av_frame_alloc();
 	}
 
+	if (!ms->video_decode_frame) {
+		ms->video_finished = 1;
+		return;
+	}
+
 	SDL_LockMutex(ms->lock);
 
 	if (!ms->video_finished && (ms->surface_queue_size < FRAMES)) {
@@ -956,13 +1053,21 @@ static int decode_thread(void *arg) {
 	int err;
 
 	AVFormatContext *ctx = avformat_alloc_context();
+	if (ctx == NULL) {
+		goto finish;
+	}
 	ms->ctx = ctx;
 
 	AVIOContext *io_context = rwops_open(ms->rwops);
+	if (io_context == NULL) {
+		goto finish;
+	}
 	ctx->pb = io_context;
 
 	err = avformat_open_input(&ctx, ms->filename, NULL, NULL);
 	if (err) {
+		avformat_free_context(ctx);
+		ms->ctx = NULL;
 		goto finish;
 	}
 
@@ -993,6 +1098,9 @@ static int decode_thread(void *arg) {
 	ms->audio_context = find_context(ctx, ms->audio_stream);
 
 	ms->swr = swr_alloc();
+	if (ms->swr == NULL) {
+		goto finish;
+	}
 
 	av_init_packet(&ms->video_pkt);
 
@@ -1107,19 +1215,27 @@ static int decode_sync_start(void *arg) {
 	int err;
 
 	AVFormatContext *ctx = avformat_alloc_context();
+	if (ctx == NULL) {
+		media_read_sync_finish(ms);
+	}
 	ms->ctx = ctx;
 
 	AVIOContext *io_context = rwops_open(ms->rwops);
+	if (io_context == NULL) {
+		media_read_sync_finish(ms);
+	}
 	ctx->pb = io_context;
 
 	err = avformat_open_input(&ctx, ms->filename, NULL, NULL);
 	if (err) {
-	  media_read_sync_finish(ms);
+		avformat_free_context(ctx);
+		ms->ctx = NULL;
+		media_read_sync_finish(ms);
 	}
 
 	err = avformat_find_stream_info(ctx, NULL);
 	if (err) {
-	  media_read_sync_finish(ms);
+		media_read_sync_finish(ms);
 	}
 
 
@@ -1144,6 +1260,9 @@ static int decode_sync_start(void *arg) {
 	ms->audio_context = find_context(ctx, ms->audio_stream);
 
 	ms->swr = swr_alloc();
+	if (ms->swr == NULL) {
+		media_read_sync_finish(ms);
+	}
 
 	av_init_packet(&ms->video_pkt);
 
@@ -1327,23 +1446,39 @@ void media_start(MediaState *ms) {
 
 	snprintf(buf, 1024, "decode: %s", ms->filename);
 	SDL_Thread *t = SDL_CreateThread(decode_thread, buf, (void *) ms);
-
-	if (t) {
-		ms->started = 1;
-		SDL_DetachThread(t);
-	}
+	ms->thread = t;
 #endif
 }
 
 
 MediaState *media_open(SDL_RWops *rwops, const char *filename) {
-	MediaState *ms = av_calloc(1, sizeof(MediaState));
+
+    deallocate_deferred();
+
+    MediaState *ms = av_calloc(1, sizeof(MediaState));
+	if (ms == NULL) {
+		return NULL;
+	}
 
 	ms->filename = av_strdup(filename);
+	if (ms->filename == NULL) {
+		deallocate(ms);
+		return NULL;
+	}
 	ms->rwops = rwops;
 
+#ifndef __EMSCRIPTEN__
 	ms->cond = SDL_CreateCond();
+	if (ms->cond == NULL) {
+		deallocate(ms);
+		return NULL;
+	}
 	ms->lock = SDL_CreateMutex();
+	if (ms->lock == NULL) {
+		deallocate(ms);
+		return NULL;
+	}
+#endif
 
 	ms->audio_duration = -1;
 	ms->frame_drops = 1;
@@ -1384,7 +1519,7 @@ void media_want_video(MediaState *ms, int video) {
 
 void media_close(MediaState *ms) {
 
-	if (!ms->started) {
+	if (!ms->thread) {
 		deallocate(ms);
 		return;
 	}
@@ -1413,6 +1548,8 @@ void media_sample_surfaces(SDL_Surface *rgb, SDL_Surface *rgba) {
 
 void media_init(int rate, int status, int equal_mono) {
 
+    deallocate_mutex = SDL_CreateMutex();
+
 	audio_sample_rate = rate / SPEED;
 	audio_equal_mono = equal_mono;
 
diff --git a/module/glcompat.h b/module/glcompat.h
index b88f09f00..674b4c0e3 100644
--- a/module/glcompat.h
+++ b/module/glcompat.h
@@ -37,6 +37,10 @@
 
     #define RENPY_GLES_2
 
+#elif defined __SWITCH__
+
+    #define RENPY_GLES_2
+
 #else
 
 	#define RENPY_OPENGL
diff --git a/module/renpysound_core.c b/module/renpysound_core.c
index 75413a146..9b410dfc2 100644
--- a/module/renpysound_core.c
+++ b/module/renpysound_core.c
@@ -31,25 +31,30 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 
 #define MAXVOLUME 16384
 
+
+SDL_mutex *name_mutex;
+
 #ifdef __EMSCRIPTEN__
 
-#define EVAL_LOCK() { }
-#define EVAL_UNLOCK() { }
-#define BEGIN() { }
-#define ENTER() { }
-#define EXIT() { }
-#define ALTENTER() { }
-#define ALTEXIT() { }
+#define LOCK_AUDIO() { }
+#define UNLOCK_AUDIO() { }
+
+#define LOCK_NAME() { }
+#define UNLOCK_NAME() { }
 
 #else
 
-#define EVAL_LOCK() { PyEval_AcquireLock(); }
-#define EVAL_UNLOCK() { PyEval_ReleaseLock(); }
-#define BEGIN() PyThreadState *_save;
-#define ENTER() { _save = PyEval_SaveThread(); SDL_LockAudio(); }
-#define EXIT() { SDL_UnlockAudio(); PyEval_RestoreThread(_save); }
-#define ALTENTER() { _save = PyEval_SaveThread(); }
-#define ALTEXIT() { PyEval_RestoreThread(_save); }
+/* These prevent the audio callback from running when held. Use this to
+   prevent the audio callback from running while the state of the audio
+   system is being changed. */
+#define LOCK_AUDIO() { SDL_LockAudio(); }
+#define UNLOCK_AUDIO() { SDL_UnlockAudio(); }
+
+/* This is held while the current track is being changed by the audio callback,
+   and can also be held to the current track doesn't change while things are
+   being processed. */
+#define LOCK_NAME() { SDL_LockMutex(name_mutex); }
+#define UNLOCK_NAME() { SDL_UnlockMutex(name_mutex); }
 
 #endif
 
@@ -61,7 +66,6 @@ void media_init(int rate, int status, int equal_mono);
 
 void media_advance_time(void);
 void media_sample_surfaces(SDL_Surface *rgb, SDL_Surface *rgba);
-
 MediaState *media_open(SDL_RWops *, const char *);
 void media_want_video(MediaState *, int);
 void media_start_end(MediaState *, double, double);
@@ -76,36 +80,6 @@ SDL_Surface *media_read_video(struct MediaState *ms);
 double media_duration(struct MediaState *ms);
 void media_wait_ready(struct MediaState *ms);
 
-/* The current Python. */
-PyInterpreterState* interp;
-PyThreadState* thread = NULL;
-
-static void incref(PyObject *ref) {
-    PyThreadState *oldstate;
-
-    EVAL_LOCK();
-    oldstate = PyThreadState_Swap(thread);
-    Py_INCREF(ref);
-    PyThreadState_Swap(oldstate);
-    EVAL_UNLOCK();
-}
-
-static void decref(PyObject *ref) {
-    PyThreadState *oldstate;
-
-    EVAL_LOCK();
-    oldstate = PyThreadState_Swap(thread);
-    Py_DECREF(ref);
-    PyThreadState_Swap(oldstate);
-    EVAL_UNLOCK();
-}
-
-/* A mutex that protects the shared data structures. */
-SDL_mutex *name_mutex;
-
-#define LOCK_NAME() { SDL_LockMutex(name_mutex); }
-#define UNLOCK_NAME() { SDL_UnlockMutex(name_mutex); }
-
 /* Min and Max */
 #define min(a, b) (((a) < (b)) ? (a) : (b))
 #define max(a, b) (((a) > (b)) ? (a) : (b))
@@ -136,7 +110,7 @@ struct Channel {
     struct MediaState *playing;
 
     /* The name of the playing music. */
-    PyObject *playing_name;
+    char *playing_name;
 
     /* The number of ms to take to fade in the playing sample. */
     int playing_fadein;
@@ -151,7 +125,7 @@ struct Channel {
     struct MediaState *queued;
 
     /* The name of the queued up sample. */
-    PyObject *queued_name;
+    char *queued_name;
 
     /* The number of ms to take to fade in the queued sample. */
     int queued_fadein;
@@ -501,14 +475,14 @@ static void callback(void *userdata, Uint8 *stream, int length) {
 
                 post_event(c);
 
+                LOCK_NAME()
+
                 d = malloc(sizeof(struct Dying));
                 d->next = dying;
                 d->stream = c->playing;
                 dying = d;
 
-                LOCK_NAME();
-
-                decref(c->playing_name);
+                free(c->playing_name);
 
                 c->playing = c->queued;
                 c->playing_name = c->queued_name;
@@ -522,7 +496,7 @@ static void callback(void *userdata, Uint8 *stream, int length) {
                 c->queued_tight = 0;
                 c->queued_start_ms = 0;
 
-                UNLOCK_NAME();
+                UNLOCK_NAME()
 
                 start_sample(c, ! old_tight);
 
@@ -549,7 +523,13 @@ static int check_channel(int c) {
     }
 
     if (c >= num_channels) {
-        channels = realloc(channels, sizeof(struct Channel) * (c + 1));
+        struct Channel *extended_channels = realloc(channels, sizeof(struct Channel) * (c + 1));
+        if (extended_channels == NULL) {
+            error(RPS_ERROR);
+            error_msg = "Unable to allocate additional channels.";
+            return -1;
+        }
+        channels = extended_channels;
 
         for (i = num_channels; i <= c; i++) {
 
@@ -576,6 +556,10 @@ static int check_channel(int c) {
 struct MediaState *load_sample(SDL_RWops *rw, const char *ext, double start, double end, int video) {
     struct MediaState *rv;
     rv = media_open(rw, ext);
+    if (rv == NULL)
+    {
+        return NULL;
+    }
     media_start_end(rv, start, end);
 
     if (video) {
@@ -587,9 +571,7 @@ struct MediaState *load_sample(SDL_RWops *rw, const char *ext, double start, dou
 }
 
 
-void RPS_play(int channel, SDL_RWops *rw, const char *ext, PyObject *name, int fadein, int tight, int paused, double start, double end) {
-
-    BEGIN();
+void RPS_play(int channel, SDL_RWops *rw, const char *ext, const char *name, int fadein, int tight, int paused, double start, double end) {
 
     struct Channel *c;
 
@@ -598,15 +580,14 @@ void RPS_play(int channel, SDL_RWops *rw, const char *ext, PyObject *name, int f
     }
 
     c = &channels[channel];
-    ENTER();
 
-    LOCK_NAME();
+    LOCK_AUDIO();
 
     /* Free playing and queued samples. */
     if (c->playing) {
         free_sample(c->playing);
         c->playing = NULL;
-        decref(c->playing_name);
+        free(c->playing_name);
         c->playing_name = NULL;
         c->playing_tight = 0;
         c->playing_start_ms = 0;
@@ -615,7 +596,7 @@ void RPS_play(int channel, SDL_RWops *rw, const char *ext, PyObject *name, int f
     if (c->queued) {
         free_sample(c->queued);
         c->queued = NULL;
-        decref(c->queued_name);
+        free(c->queued_name);
         c->queued_name = NULL;
         c->queued_tight = 0;
         c->queued_start_ms = 0;
@@ -626,34 +607,26 @@ void RPS_play(int channel, SDL_RWops *rw, const char *ext, PyObject *name, int f
     c->playing = load_sample(rw, ext, start, end, c->video);
 
     if (! c->playing) {
-    	UNLOCK_NAME();
-    	EXIT();
+        UNLOCK_AUDIO();
         error(SOUND_ERROR);
         return;
     }
 
-    incref(name);
-    c->playing_name = name;
-
+    c->playing_name = strdup(name);
     c->playing_fadein = fadein;
     c->playing_tight = tight;
-
     c->playing_start_ms = (int) (start * 1000);
 
     c->paused = paused;
 
     start_sample(c, 1);
-/*     update_pause(); */
 
-    UNLOCK_NAME();
+    UNLOCK_AUDIO();
 
-    EXIT();
     error(SUCCESS);
 }
 
-void RPS_queue(int channel, SDL_RWops *rw, const char *ext, PyObject *name, int fadein, int tight, double start, double end) {
-
-    BEGIN();
+void RPS_queue(int channel, SDL_RWops *rw, const char *ext, const char *name, int fadein, int tight, double start, double end) {
 
     struct Channel *c;
 
@@ -663,21 +636,20 @@ void RPS_queue(int channel, SDL_RWops *rw, const char *ext, PyObject *name, int
 
     c = &channels[channel];
 
-    ENTER();
-
     /* If we're not playing, then we should play instead of queue. */
     if (!c->playing) {
-        EXIT();
         RPS_play(channel, rw, ext, name, fadein, tight, 0, start, end);
         return;
     }
 
+    LOCK_AUDIO();
+
     /* Free queued sample. */
 
     if (c->queued) {
         free_sample(c->queued);
         c->queued = NULL;
-        decref(c->queued_name);
+        free(c->queued_name);
         c->queued_name = NULL;
         c->queued_tight = 0;
     }
@@ -686,20 +658,20 @@ void RPS_queue(int channel, SDL_RWops *rw, const char *ext, PyObject *name, int
     c->queued = load_sample(rw, ext, start, end, c->video);
 
     if (! c->queued) {
-        EXIT();
+        UNLOCK_AUDIO();
+
         error(SOUND_ERROR);
         return;
     }
 
-    incref(name);
-    c->queued_name = name;
+    c->queued_name = strdup(name);
     c->queued_fadein = fadein;
     c->queued_tight = tight;
 
     c->queued_start_ms = (int) (start * 1000);
 
+    UNLOCK_AUDIO();
 
-    EXIT();
     error(SUCCESS);
 }
 
@@ -709,7 +681,6 @@ void RPS_queue(int channel, SDL_RWops *rw, const char *ext, PyObject *name, int
  * music.
  */
 void RPS_stop(int channel) {
-    BEGIN();
 
     struct Channel *c;
 
@@ -719,8 +690,7 @@ void RPS_stop(int channel) {
 
     c = &channels[channel];
 
-    ENTER();
-    LOCK_NAME();
+    LOCK_AUDIO();
 
     if (c->playing) {
         post_event(c);
@@ -730,7 +700,7 @@ void RPS_stop(int channel) {
     if (c->playing) {
         free_sample(c->playing);
         c->playing = NULL;
-        decref(c->playing_name);
+        free(c->playing_name);
         c->playing_name = NULL;
         c->playing_start_ms = 0;
     }
@@ -738,15 +708,12 @@ void RPS_stop(int channel) {
     if (c->queued) {
         free_sample(c->queued);
         c->queued = NULL;
-        decref(c->queued_name);
+        free(c->queued_name);
         c->queued_name = NULL;
         c->queued_start_ms = 0;
     }
 
-/*     update_pause(); */
-
-    UNLOCK_NAME();
-    EXIT();
+    UNLOCK_AUDIO();
 
     error(SUCCESS);
 }
@@ -760,7 +727,6 @@ void RPS_stop(int channel) {
  * false.
  */
 void RPS_dequeue(int channel, int even_tight) {
-    BEGIN();
 
     struct Channel *c;
 
@@ -770,12 +736,12 @@ void RPS_dequeue(int channel, int even_tight) {
 
     c = &channels[channel];
 
-    ENTER();
+    LOCK_AUDIO();
 
     if (c->queued && (! c->playing_tight || even_tight)) {
         free_sample(c->queued);
         c->queued = NULL;
-        decref(c->queued_name);
+        free(c->queued_name);
         c->queued_name = NULL;
     } else {
         c->queued_tight = 0;
@@ -783,7 +749,8 @@ void RPS_dequeue(int channel, int even_tight) {
 
     c->queued_start_ms = 0;
 
-    EXIT();
+    UNLOCK_AUDIO();
+
     error(SUCCESS);
 }
 
@@ -794,7 +761,6 @@ void RPS_dequeue(int channel, int even_tight) {
  */
 int RPS_queue_depth(int channel) {
     int rv = 0;
-    BEGIN();
 
     struct Channel *c;
 
@@ -804,21 +770,20 @@ int RPS_queue_depth(int channel) {
 
     c = &channels[channel];
 
-    ENTER();
+    LOCK_NAME();
 
     if (c->playing) rv++;
     if (c->queued) rv++;
 
-    EXIT();
+    UNLOCK_NAME();
+
     error(SUCCESS);
 
     return rv;
 }
 
 PyObject *RPS_playing_name(int channel) {
-	BEGIN();
-	PyObject *rv;
-
+    PyObject *rv;
     struct Channel *c;
 
     if (check_channel(channel)) {
@@ -826,24 +791,18 @@ PyObject *RPS_playing_name(int channel) {
         return Py_None;
     }
 
-
     c = &channels[channel];
 
-    ALTENTER();
     LOCK_NAME();
-    ALTEXIT();
 
     if (c->playing_name) {
-        rv = c->playing_name;
+        rv = PyBytes_FromString(c->playing_name);
     } else {
+        Py_INCREF(Py_None);
         rv = Py_None;
     }
 
-    Py_INCREF(rv);
-
-    ALTENTER();
     UNLOCK_NAME();
-    ALTEXIT();
 
     error(SUCCESS);
 
@@ -856,7 +815,7 @@ PyObject *RPS_playing_name(int channel) {
  * fadeout finishes (a queued sound may then start at full volume).
  */
 void RPS_fadeout(int channel, int ms) {
-    BEGIN();
+
     int fade_steps;
     struct Channel *c;
 
@@ -866,18 +825,16 @@ void RPS_fadeout(int channel, int ms) {
 
     c = &channels[channel];
 
-    ENTER();
+    LOCK_AUDIO();
 
     if (ms == 0) {
         c->stop_bytes = 0;
-        EXIT();
+        UNLOCK_AUDIO();
 
         error(SUCCESS);
         return;
     }
 
-
-
     fade_steps = c->volume;
     c->fade_delta = -1;
     c->fade_off = 0;
@@ -897,7 +854,7 @@ void RPS_fadeout(int channel, int ms) {
         c->playing_tight = 0;
     }
 
-    EXIT();
+    UNLOCK_AUDIO();
 
     error(SUCCESS);
 }
@@ -906,7 +863,6 @@ void RPS_fadeout(int channel, int ms) {
  * Sets the pause flag on the given channel 0 = unpaused, 1 = paused.
  */
 void RPS_pause(int channel, int pause) {
-    BEGIN();
 
     struct Channel *c;
 
@@ -916,12 +872,8 @@ void RPS_pause(int channel, int pause) {
 
     c = &channels[channel];
 
-    ENTER();
-
     c->paused = pause;
 
-    EXIT();
-
     error(SUCCESS);
 
 }
@@ -930,9 +882,8 @@ void RPS_unpause_all(void) {
 
     int i;
 
-    BEGIN();
-
-    ENTER();
+    /* Since media_wait_ready can block, we need to release the GIL. */
+    Py_BEGIN_ALLOW_THREADS
 
     for (i = 0; i < num_channels; i++) {
         if (channels[i].playing && channels[i].paused) {
@@ -940,13 +891,12 @@ void RPS_unpause_all(void) {
         }
     }
 
+    Py_END_ALLOW_THREADS
 
     for (i = 0; i < num_channels; i++) {
         channels[i].paused = 0;
     }
 
-    EXIT();
-
     error(SUCCESS);
 
 }
@@ -958,15 +908,13 @@ int RPS_get_pos(int channel) {
     int rv;
     struct Channel *c;
 
-    BEGIN();
-
     if (check_channel(channel)) {
         return -1;
     }
 
     c = &channels[channel];
 
-    ENTER();
+    LOCK_NAME();
 
     if (c->playing) {
         rv = bytes_to_ms(c->pos) + c->playing_start_ms;
@@ -974,7 +922,7 @@ int RPS_get_pos(int channel) {
         rv = -1;
     }
 
-    EXIT();
+    UNLOCK_NAME();
 
     error(SUCCESS);
     return rv;
@@ -988,15 +936,13 @@ double RPS_get_duration(int channel) {
     double rv;
     struct Channel *c;
 
-    BEGIN();
-
     if (check_channel(channel)) {
         return 0.0;
     }
 
     c = &channels[channel];
 
-    ENTER();
+    LOCK_NAME();
 
     if (c->playing) {
         rv = media_duration(c->playing);
@@ -1004,7 +950,7 @@ double RPS_get_duration(int channel) {
         rv = 0.0;
     }
 
-    EXIT();
+    UNLOCK_NAME();
 
     error(SUCCESS);
     return rv;
@@ -1016,7 +962,6 @@ double RPS_get_duration(int channel) {
  */
 void RPS_set_endevent(int channel, int event) {
     struct Channel *c;
-    BEGIN();
 
     if (check_channel(channel)) {
         return;
@@ -1024,12 +969,8 @@ void RPS_set_endevent(int channel, int event) {
 
     c = &channels[channel];
 
-    ENTER();
-
     c->event = event;
 
-    EXIT();
-
     error(SUCCESS);
 }
 
@@ -1039,20 +980,14 @@ void RPS_set_endevent(int channel, int event) {
  */
 void RPS_set_volume(int channel, float volume) {
     struct Channel *c;
-    BEGIN();
 
     if (check_channel(channel)) {
         return;
     }
 
     c = &channels[channel];
-
-    ENTER();
-
     c->volume = (int) (volume * MAXVOLUME);
 
-    EXIT();
-
     error(SUCCESS);
 }
 
@@ -1063,7 +998,6 @@ float RPS_get_volume(int channel) {
     float rv;
 
     struct Channel *c;
-    BEGIN();
 
     if (check_channel(channel)) {
         return 0.0;
@@ -1071,12 +1005,8 @@ float RPS_get_volume(int channel) {
 
     c = &channels[channel];
 
-    ENTER();
-
     rv = 1.0 * c->volume / MAXVOLUME;
 
-    EXIT();
-
     error(SUCCESS);
     return rv;
 }
@@ -1087,7 +1017,6 @@ float RPS_get_volume(int channel) {
  */
 void RPS_set_pan(int channel, float pan, float delay) {
     struct Channel *c;
-    BEGIN();
 
     if (check_channel(channel)) {
         return;
@@ -1095,14 +1024,14 @@ void RPS_set_pan(int channel, float pan, float delay) {
 
     c = &channels[channel];
 
-    ENTER();
+    LOCK_AUDIO();
 
     c->pan_start = interpolate_pan(c);
     c->pan_end = pan;
     c->pan_length = (int) (audio_spec.freq * delay);
     c->pan_done = 0;
 
-    EXIT();
+    UNLOCK_AUDIO();
 
     error(SUCCESS);
 }
@@ -1112,7 +1041,6 @@ void RPS_set_pan(int channel, float pan, float delay) {
  */
 void RPS_set_secondary_volume(int channel, float vol2, float delay) {
     struct Channel *c;
-    BEGIN();
 
     if (check_channel(channel)) {
         return;
@@ -1120,14 +1048,14 @@ void RPS_set_secondary_volume(int channel, float vol2, float delay) {
 
     c = &channels[channel];
 
-    ENTER();
+    LOCK_AUDIO();
 
     c->vol2_start = interpolate_vol2(c);
     c->vol2_end = vol2;
     c->vol2_length = (int) (audio_spec.freq * delay);
     c->vol2_done = 0;
 
-    EXIT();
+    UNLOCK_AUDIO();
 
     error(SUCCESS);
 }
@@ -1136,8 +1064,6 @@ PyObject *RPS_read_video(int channel) {
     struct Channel *c;
     SDL_Surface *surf = NULL;
 
-    BEGIN();
-
     if (check_channel(channel)) {
         Py_INCREF(Py_None);
     	return Py_None;
@@ -1145,14 +1071,10 @@ PyObject *RPS_read_video(int channel) {
 
     c = &channels[channel];
 
-    ALTENTER();
-
     if (c->playing) {
-    	surf = media_read_video(c->playing);
+        surf = media_read_video(c->playing);
     }
 
-    ALTEXIT();
-
     error(SUCCESS);
 
     if (surf) {
@@ -1168,24 +1090,18 @@ int RPS_video_ready(int channel) {
     struct Channel *c;
     int rv;
 
-    BEGIN();
-
     if (check_channel(channel)) {
     	return 1;
     }
 
     c = &channels[channel];
 
-    ALTENTER();
-
     if (c->playing) {
     	rv = media_video_ready(c->playing);
     } else {
     	rv = 1;
     }
 
-    ALTEXIT();
-
     error(SUCCESS);
 
     return rv;
@@ -1225,17 +1141,6 @@ void RPS_init(int freq, int stereo, int samples, int status, int equal_mono) {
 
     import_pygame_sdl2();
 
-    if (!thread) {
-        thread = PyThreadState_Get();
-        interp = thread->interp;
-        thread = PyThreadState_New(interp);
-    }
-
-    if (!thread) {
-        error(SDL_ERROR);
-        return;
-    }
-
     if (SDL_Init(SDL_INIT_AUDIO)) {
         error(SDL_ERROR);
         return;
@@ -1263,7 +1168,6 @@ void RPS_init(int freq, int stereo, int samples, int status, int equal_mono) {
 }
 
 void RPS_quit() {
-    BEGIN();
 
     if (! initialized) {
         return;
@@ -1271,9 +1175,9 @@ void RPS_quit() {
 
     int i;
 
-    ENTER();
+    LOCK_AUDIO();
     SDL_PauseAudio(1);
-    EXIT();
+    UNLOCK_AUDIO();
 
     for (i = 0; i < num_channels; i++) {
         RPS_stop(i);
@@ -1289,22 +1193,19 @@ void RPS_quit() {
 /* This must be called frequently, to take care of deallocating dead
  * streams. */
 void RPS_periodic() {
-    BEGIN();
-
-    if (!dying) {
-        return;
-    }
 
-    ENTER();
+    LOCK_NAME();
+    struct Dying *d = dying;
+    dying = NULL;
+    UNLOCK_NAME();
 
-    while (dying) {
-        struct Dying *d = dying;
+    while (d) {
         media_close(d->stream);
-        dying = d->next;
+        struct Dying *next_d = d->next;
         free(d);
+        d = next_d;
     }
 
-    EXIT();
 }
 
 void RPS_advance_time(void) {
@@ -1339,5 +1240,3 @@ char *RPS_get_error() {
         return (char *) "Error getting error.";
     }
 }
-
-
diff --git a/module/renpysound_core.h b/module/renpysound_core.h
index 149d0dac3..424532ece 100644
--- a/module/renpysound_core.h
+++ b/module/renpysound_core.h
@@ -27,8 +27,8 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #include <Python.h>
 #include <SDL.h>
 
-void RPS_play(int channel, SDL_RWops *rw, const char *ext, PyObject *name, int fadeout, int tight, int paused, double start, double end);
-void RPS_queue(int channel, SDL_RWops *rw, const char *ext, PyObject *name, int fadeout, int tight, double start, double end);
+void RPS_play(int channel, SDL_RWops *rw, const char *ext, const char *name, int fadeout, int tight, int paused, double start, double end);
+void RPS_queue(int channel, SDL_RWops *rw, const char *ext, const char *name, int fadeout, int tight, double start, double end);
 void RPS_stop(int channel);
 void RPS_dequeue(int channel, int even_tight);
 int RPS_queue_depth(int channel);
diff --git a/renpy.py b/renpy.py
index 0c7e53012..92dd67f70 100644
--- a/renpy.py
+++ b/renpy.py
@@ -131,6 +131,9 @@ def path_to_saves(gamedir, save_directory=None):
             rv = "~/RenPy/" + renpy.config.save_directory
             return os.path.expanduser(rv)
 
+    elif renpy.switch:
+        return "sdmc:/Ren'Py Data/" + save_directory
+
     else:
         rv = "~/.renpy/" + save_directory
         return os.path.expanduser(rv)
diff --git a/renpy/__init__.py b/renpy/__init__.py
index de5524508..e8ff53123 100644
--- a/renpy/__init__.py
+++ b/renpy/__init__.py
@@ -71,6 +71,7 @@ linux = False
 android = False
 ios = False
 emscripten = False
+switch = False
 
 # Should we enable experimental features and debugging?
 experimental = "RENPY_EXPERIMENTAL" in os.environ
@@ -124,11 +125,13 @@ elif "ANDROID_PRIVATE" in os.environ:
     android = True
 elif sys.platform == 'emscripten' or "RENPY_EMSCRIPTEN" in os.environ:
     emscripten = True
+elif sys.platform == 'horizon':
+    switch = True
 else:
     linux = True
 
 # A flag that's true if we're on a smartphone or tablet-like platform.
-mobile = android or ios or emscripten
+mobile = android or ios or emscripten or switch
 
 # A flag that's set to true if the game directory is bundled inside a mac app.
 macapp = False
diff --git a/renpy/audio/renpysound.pyx b/renpy/audio/renpysound.pyx
index 3880d3873..e215b2d3a 100644
--- a/renpy/audio/renpysound.pyx
+++ b/renpy/audio/renpysound.pyx
@@ -1,4 +1,4 @@
-# Copyright 2004-2019 Tom Rothamel <pytom@bishoujo.us>
+# Copyright 2004-2020 Tom Rothamel <pytom@bishoujo.us>
 #
 # Permission is hereby granted, free of charge, to any person
 # obtaining a copy of this software and associated documentation files
@@ -54,8 +54,8 @@ import_pygame_sdl2()
 
 cdef extern from "renpysound_core.h":
 
-    void RPS_play(int channel, SDL_RWops *rw, char *ext, object name, int fadein, int tight, int paused, double start, double end)
-    void RPS_queue(int channel, SDL_RWops *rw, char *ext, object name, int fadein, int tight, double start, double end)
+    void RPS_play(int channel, SDL_RWops *rw, char *ext, char* name, int fadein, int tight, int paused, double start, double end)
+    void RPS_queue(int channel, SDL_RWops *rw, char *ext, char *name, int fadein, int tight, double start, double end)
     void RPS_stop(int channel)
     void RPS_dequeue(int channel, int even_tight)
     int RPS_queue_depth(int channel)
@@ -93,9 +93,8 @@ def check_error():
     """
 
     e = RPS_get_error();
-
-    if str(e):
-        raise Exception(e)
+    if len(e):
+        raise Exception(unicode(e, "utf-8", "replace"))
 
 def play(channel, file, name, paused=False, fadein=0, tight=False, start=0, end=0):
     """
@@ -140,8 +139,8 @@ def play(channel, file, name, paused=False, fadein=0, tight=False, start=0, end=
     else:
         tight = 0
 
-    extension = name.encode("utf-8")
-    RPS_play(channel, rw, extension, name, fadein, tight, pause, start, end)
+    name = name.encode("utf-8")
+    RPS_play(channel, rw, name, name, fadein, tight, pause, start, end)
     check_error()
 
 def queue(channel, file, name, fadein=0, tight=False, start=0, end=0):
@@ -164,8 +163,8 @@ def queue(channel, file, name, fadein=0, tight=False, start=0, end=0):
     else:
         tight = 0
 
-    extension = name.encode("utf-8")
-    RPS_queue(channel, rw, extension, name, fadein, tight, start, end)
+    name = name.encode("utf-8")
+    RPS_queue(channel, rw, name, name, fadein, tight, start, end)
     check_error()
 
 def stop(channel):
@@ -202,7 +201,12 @@ def playing_name(channel):
     `play` or `queue`.
     """
 
-    return RPS_playing_name(channel)
+    rv = RPS_playing_name(channel)
+
+    if rv is not None:
+        rv = rv.decode("utf-8")
+
+    return rv
 
 def pause(channel):
     """
@@ -421,4 +425,3 @@ def sample_surfaces(rgb, rgba):
     rgba_surface = rgb
 
     RPS_sample_surfaces(rgb, rgba)
-
diff --git a/renpy/bootstrap.py b/renpy/bootstrap.py
index 8afc163b4..cea7848e0 100644
--- a/renpy/bootstrap.py
+++ b/renpy/bootstrap.py
@@ -307,6 +307,8 @@ You may be using a system install of python. Please run {0}.sh,
 
                 if renpy.android:
                     renpy.config.logdir = os.environ['ANDROID_PUBLIC']
+                elif renpy.switch:
+                    renpy.config.logdir = os.path.abspath("sdmc:/Ren'Py Logs/")
                 else:
                     renpy.config.logdir = basedir
 
@@ -359,5 +361,5 @@ You may be using a system install of python. Please run {0}.sh,
 
         # Prevent subprocess from throwing errors while trying to run it's
         # __del__ method during shutdown.
-        if not renpy.emscripten:
+        if not (renpy.emscripten or renpy.switch):
             subprocess.Popen.__del__ = popen_del
diff --git a/renpy/display/core.py b/renpy/display/core.py
index f72ecbbca..e64e410cc 100644
--- a/renpy/display/core.py
+++ b/renpy/display/core.py
@@ -1829,6 +1829,7 @@ class Interface(object):
         """
 
         pygame.display.hint("SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS", "0")
+        pygame.display.hint("SDL_TOUCH_MOUSE_EVENTS", "1")
 
         # Needed for Unity.
         wmclass = renpy.config.save_directory or os.path.basename(sys.argv[0])
@@ -2126,7 +2127,7 @@ class Interface(object):
         if not self.started:
             return
 
-        if background and not renpy.emscripten:
+        if background and not (renpy.emscripten or renpy.switch):
             self.bgscreenshot_event.clear()
             self.bgscreenshot_needed = True
 
diff --git a/renpy/display/video.py b/renpy/display/video.py
index 44d236630..8f5eeb4ef 100644
--- a/renpy/display/video.py
+++ b/renpy/display/video.py
@@ -374,7 +374,7 @@ class Movie(renpy.display.core.Displayable):
 
         self.play_callback = play_callback
 
-        if (self.channel == "movie") and (renpy.config.hw_video) and renpy.mobile:
+        if (self.channel == "movie") and (renpy.config.hw_video) and (renpy.android or renpy.ios):
             raise Exception("Movie(channel='movie') doesn't work on mobile when config.hw_video is true. (Use a different channel argument.)")
 
     def render(self, width, height, st, at):
diff --git a/renpy/gl/gldraw.pyx b/renpy/gl/gldraw.pyx
index 864b2ab27..111ab59c7 100644
--- a/renpy/gl/gldraw.pyx
+++ b/renpy/gl/gldraw.pyx
@@ -321,6 +321,18 @@ cdef class GLDraw:
             pwidth = 0
             pheight = 0
 
+        elif renpy.switch:
+            opengl = pygame.OPENGL
+            resizable = pygame.RESIZABLE
+
+            pygame.display.hint("SDL_OPENGL_ES_DRIVER", "1")
+            pygame.display.gl_set_attribute(pygame.GL_CONTEXT_MAJOR_VERSION, 2);
+            pygame.display.gl_set_attribute(pygame.GL_CONTEXT_MINOR_VERSION, 0);
+            pygame.display.gl_set_attribute(pygame.GL_CONTEXT_PROFILE_MASK, pygame.GL_CONTEXT_PROFILE_ES)
+
+            pwidth = 1920
+            pheight = 1080
+
         else:
             opengl = pygame.OPENGL
 
@@ -522,6 +534,9 @@ cdef class GLDraw:
             # WebGL is GLES
             gltexture.use_gles()
 
+        elif renpy.switch:
+            gltexture.use_gles()
+
         else:
             gltexture.use_gl()
 
@@ -567,7 +582,7 @@ cdef class GLDraw:
 
         # Pick a texture environment subsystem.
 
-        if EGL or renpy.android or renpy.ios or renpy.emscripten or (allow_shader and use_subsystem(
+        if EGL or renpy.android or renpy.ios or renpy.emscripten or renpy.switch or (allow_shader and use_subsystem(
             glenviron_shader,
             "RENPY_GL_ENVIRON",
             "shader",
@@ -626,7 +641,7 @@ cdef class GLDraw:
                 return False
 
         # Pick a Render-to-texture method.
-        use_fbo = renpy.ios or renpy.android or renpy.emscripten or EGL or use_subsystem(
+        use_fbo = renpy.ios or renpy.android or renpy.emscripten or renpy.switch or EGL or use_subsystem(
                 glrtt_fbo,
                 "RENPY_GL_RTT",
                 "fbo",
diff --git a/renpy/gl2/gl2draw.pyx b/renpy/gl2/gl2draw.pyx
index 3c70d5762..43b2dceb9 100644
--- a/renpy/gl2/gl2draw.pyx
+++ b/renpy/gl2/gl2draw.pyx
@@ -286,6 +286,9 @@ cdef class GL2Draw:
             pygame.display.gl_set_attribute(pygame.GL_CONTEXT_PROFILE_MASK, pygame.GL_CONTEXT_PROFILE_ES)
         else:
             pygame.display.hint("SDL_OPENGL_ES_DRIVER", "0")
+            pygame.display.gl_set_attribute(pygame.GL_CONTEXT_MAJOR_VERSION, 1);
+            pygame.display.gl_set_attribute(pygame.GL_CONTEXT_MINOR_VERSION, 3);
+            pygame.display.gl_set_attribute(pygame.GL_CONTEXT_PROFILE_MASK, pygame.GL_CONTEXT_PROFILE_COMPATIBILITY)
 
     def set_mode(self, virtual_size, physical_size, fullscreen):
         """
@@ -352,6 +355,10 @@ cdef class GL2Draw:
             pheight = 0
             gles = True
 
+        elif renpy.switch:
+            window_flags |= pygame.RESIZABLE
+            gles = True
+
         else:
             if self.dpi_scale == 1.0:
                 window_flags |= pygame.WINDOW_ALLOW_HIGHDPI
diff --git a/renpy/loadsave.py b/renpy/loadsave.py
index 68e9074a8..6ce276ab0 100644
--- a/renpy/loadsave.py
+++ b/renpy/loadsave.py
@@ -563,7 +563,9 @@ def force_autosave(take_screenshot=False, block=False):
 
     autosave_not_running.clear()
 
-    if not renpy.emscripten:
+    if renpy.switch:
+        autosave_thread_function(take_screenshot)
+    elif not renpy.emscripten:
         autosave_thread = threading.Thread(target=autosave_thread_function, args=(take_screenshot,))
         autosave_thread.daemon = True
         autosave_thread.start()
diff --git a/renpy/persistent.py b/renpy/persistent.py
index 244a0ba80..f966b4d22 100644
--- a/renpy/persistent.py
+++ b/renpy/persistent.py
@@ -468,6 +468,10 @@ def MultiPersistent(name):
     elif renpy.macintosh:
         files = [ os.path.expanduser("~/.renpy/persistent"),
                   os.path.expanduser("~/Library/RenPy/persistent") ]
+
+    elif renpy.switch:
+        files = [ "sdmc:/Ren'Py Data/persistent" ]
+
     else:
         files = [ os.path.expanduser("~/.renpy/persistent") ]
 
